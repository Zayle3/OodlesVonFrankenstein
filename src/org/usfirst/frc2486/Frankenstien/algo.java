// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2486.FrankenstienFinal;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

import org.usfirst.frc2486.Coconuts.CamData;
import org.usfirst.frc2486.FrankenstienFinal.commands.*;
import org.usfirst.frc2486.FrankenstienFinal.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	NetworkTable table;
	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Pneumatics pneumatics;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        pneumatics = new Pneumatics();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        CamData.init();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        table = NetworkTable.getTable("GRIP/datatable");
        //CamData.init();
        Robot.pneumatics.startSolenoid();
        Robot.pneumatics.clearSticky();
    
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        //CamData.sendData();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        RobotMap robotMap = new RobotMap();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        //CamData.sendData();
        double [] width = table.getNumberArray("width");
        if (width[0] == 131){
        	RobotMap.driveTrainTalonFrontLeft.set(0);
        	RobotMap.driveTrainTalonFrontRight.set(0);
        	RobotMap.driveTrainTalonRearLeft.set(0);
        	RobotMap.driveTrainTalonRearRight.set(0);
        	DriverStation.reportError("Stopping", true);
        }else if(width[0] > 131 && width[0] < 367) {

        	RobotMap.driveTrainTalonFrontLeft.set(width[0]/236/2-0.555);
        	RobotMap.driveTrainTalonFrontRight.set(width[0]/236/2-0.555);
        	RobotMap.driveTrainTalonRearLeft.set(width[0]/236/2-0.555);
        	RobotMap.driveTrainTalonRearRight.set(width[0]/236/2-0.555);
        	DriverStation.reportError("Inbetween 4 and 1.5 ft", true);
        }else if(width[0] < 131 && width[0] > 60){
        	RobotMap.driveTrainTalonFrontLeft.set(width[0]/71/2-1.845);
        	RobotMap.driveTrainTalonFrontRight.set(width[0]/71/2-1.845);
        	RobotMap.driveTrainTalonRearLeft.set(width[0]/71/2-1.845);
        	RobotMap.driveTrainTalonRearRight.set(width[0]/71/2-1.845);
        	DriverStation.reportError("Inbetween 4 and 7 ft", true);
        }else if(width [0] <= 60) {
        	RobotMap.driveTrainTalonFrontLeft.set(-1);
        	RobotMap.driveTrainTalonFrontRight.set(-1);
        	RobotMap.driveTrainTalonRearLeft.set(-1);
        	RobotMap.driveTrainTalonRearRight.set(-1);
        	DriverStation.reportError("7 ft and further", true);
        }else if(width[0] >= 367) {
        	RobotMap.driveTrainTalonFrontLeft.set(1);
        	RobotMap.driveTrainTalonFrontRight.set(1);
        	RobotMap.driveTrainTalonRearLeft.set(1);
        	RobotMap.driveTrainTalonRearRight.set(1);
        	DriverStation.reportError("1.5 ft and closer", true);
        }
        double w = width[0];
        String w_string = String.valueOf(w);
        DriverStation.reportError(w_string, true);
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    double scaleInput(double dVal)  {
		double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
				0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

		// get the corresponding index for the scaleInput array.
		int index = (int) (dVal * 16.0);

		// index should be positive.
		if (index < 0) {
			index = -index;
		}

		// index cannot exceed size of array minus 1.
		if (index > 16) {
			index = 16;
		}

		// get value from the array.
		double dScale = 0.0;
		if (dVal < 0) {
			dScale = -scaleArray[index];
		} else {
			dScale = scaleArray[index];
		}

		// return scaled value.
		return dScale;
	}
    
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        CamData.sendData();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        CamData.sendData();
    }
}
